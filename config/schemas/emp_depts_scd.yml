database_name: emp_depts_scd

# Use PostgreSQL data types. Make sure the data type is supported in Athena too.
tables:
  - table_name: employees
    columns:
      - name: e_id
        data_type: BIGINT
        primary_key: true
      - name: e_full_name
        data_type: TEXT
      - name: e_salary
        data_type: BIGINT
      - name: e_d_id
        data_type: BIGINT

  - table_name: departments
    columns:
      - name: d_id
        data_type: BIGINT
        primary_key: true
      - name: d_name
        data_type: TEXT
      - name: d_cost_center
        data_type: INT

  - table_name: emp_depts
    columns:
      - name: ed_id
        data_type: BIGINT
        primary_key: true
      - name: e_id
        data_type: BIGINT
      - name: d_id
        data_type: BIGINT
      - name: e_full_name
        data_type: TEXT
      - name: e_salary
        data_type: BIGINT
      - name: d_name
        data_type: TEXT
      - name: d_cost_center
        data_type: INT
      - name: ed_valid_from
        data_type: TIMESTAMP
      - name: ed_valid_until
        data_type: TIMESTAMP

    dependencies:
      - employees
      - departments

    transform: |
      -- Implicit "input" tables:
      -- departments_inserts
      -- departments_deletes
      -- employees_inserts
      -- employees_deletes
      --
      -- Implicit "output" tables:
      -- emp_depts_deletes
      -- emp_depts_inserts
      --
      -- Other tables that can be read:
      -- departments
      -- employees
      -- emp_depts

      CREATE TEMPORARY TABLE to_update (LIKE emp_depts);

      -- For all deleted / updated rows, set the `ed_valid_until` column in
      -- `emp_depts`.
      INSERT INTO to_update
        SELECT
          ed_id,
          e_id,
          d_id,
          e_full_name,
          e_salary,
          d_name,
          d_cost_center,
          ed_valid_from,
          GETDATE() AS ed_valid_until
        FROM emp_depts
        WHERE
          (e_id IN (SELECT e_id FROM employees_deletes)
            OR d_id IN (SELECT d_id FROM departments_deletes))
          AND ed_valid_until IS NULL;

      INSERT INTO emp_depts_deletes
        SELECT ed_id FROM to_update;

      INSERT INTO emp_depts_inserts
        SELECT * FROM to_update;

      -- Incrementally update the join.
      INSERT INTO emp_depts_inserts (
        e_id,
        d_id,
        e_full_name,
        e_salary,
        d_name,
        d_cost_center,
        ed_valid_from,
        ed_valid_until
      )
        SELECT
          e_id,
          d_id,
          e_full_name,
          e_salary,
          d_name,
          d_cost_center,
          GETDATE() AS ed_valid_from,
          NULL AS ed_valid_until
        FROM
          employees_inserts,
          departments_inserts
        WHERE
          e_d_id = e_id;

      INSERT INTO emp_depts_inserts (
        e_id,
        d_id,
        e_full_name,
        e_salary,
        d_name,
        d_cost_center,
        ed_valid_from,
        ed_valid_until
      )
        SELECT
          e_id,
          d_id,
          e_full_name,
          e_salary,
          d_name,
          d_cost_center,
          GETDATE() AS ed_valid_from,
          NULL AS ed_valid_until
        FROM
          employees,
          departments_inserts
        WHERE
          e_d_id = e_id;

      INSERT INTO emp_depts_inserts (
        e_id,
        d_id,
        e_full_name,
        e_salary,
        d_name,
        d_cost_center,
        ed_valid_from,
        ed_valid_until
      )
        SELECT
          e_id,
          d_id,
          e_full_name,
          e_salary,
          d_name,
          d_cost_center,
          GETDATE() AS ed_valid_from,
          NULL AS ed_valid_until
        FROM
          employees_inserts,
          departments
        WHERE
          e_d_id = e_id;

      DROP TABLE to_update;
