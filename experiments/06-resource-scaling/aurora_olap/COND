from itertools import product

include("../olap.cond")
include("../aurora.cond")

NUM_NODES_AURORA = [1, 2]

for instance in AURORA_INSTANCE_TYPES:
  combine(
    name=instance,
    deps=[
      ":multi-{}-1".format(instance),
    ] + [
      ":q{}-{}-1".format(query_idx, instance)
      for query_idx in INDIVIDUAL_QUERIES
    ],
  )

for instance, nodes in product(AURORA_INSTANCE_TYPES, NUM_NODES_AURORA):
  combine(
    name="{}-{}".format(instance, nodes),
    deps=[
      ":multi-{}-{}".format(instance, nodes)
    ] + [
      ":q{}-{}-{}".format(query_idx, instance, nodes)
      for query_idx in INDIVIDUAL_QUERIES
    ],
  )

  run_experiment_group(
    name="multi-{}-{}".format(instance, nodes),
    run="python3 ../olap_batch_runner.py",
    experiments=[
      ExperimentInstance(
        name="multi-{}-{}-{}".format(instance, nodes, clients),
        options={
          "run_for_s": RUN_FOR_S,
          "avg_gap_s": AVG_GAP_S,
          "std_gap_s": STD_GAP_S,
          "cstr_var": CSTR_VAR,
          "query_file": QUERY_FILE,
          "num_clients": clients,
        },
      )
      for clients in NUM_CLIENTS
    ],
  )

  for query_idx in INDIVIDUAL_QUERIES:
    run_experiment_group(
      name="q{}-{}-{}".format(query_idx, instance, nodes),
      run="python3 ../olap_batch_runner.py",
      experiments=[
        ExperimentInstance(
          name="q{}-{}-{}-{}".format(query_idx, instance, nodes, clients),
          options={
            "run_for_s": RUN_FOR_S,
            "avg_gap_s": AVG_GAP_S,
            "std_gap_s": STD_GAP_S,
            "num_clients": clients,
            "cstr_var": CSTR_VAR,
            "query_file": QUERY_FILE,
            "specific_query_idx": query_idx,
          },
        )
        for clients in NUM_CLIENTS
      ],
    )
