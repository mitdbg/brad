from itertools import product

include("../common.cond")

INSTANCE_TYPES = [
  "r6g_large",
  "r6g_xlarge",
  "r6g_2xlarge",
]

combine(
  name="all",
  deps=[
    ":{}".format(instance)
    for instance in INSTANCE_TYPES
  ],
)

for instance in INSTANCE_TYPES:
  group(
    name="{}-1-of-2".format(instance),
    deps=[
      ":{}-{}-q{}".format(instance, *config)
      for idx, config in enumerate(product(NUM_CLIENTS, range(NUM_QUERIES))) if idx % 2 == 0
    ],
  )

  group(
    name="{}-2-of-2".format(instance),
    deps=[
      ":{}-{}-q{}".format(instance, *config)
      for idx, config in enumerate(product(NUM_CLIENTS, range(NUM_QUERIES))) if idx % 2 == 1
    ],
  )


  run_experiment_group(
    name=instance,
    run="python3 -m brad.calibration.measure_load",
    experiments=[
      ExperimentInstance(
        name="{}-{}-q{}".format(instance, clients, query_idx),
        options={
          "num-clients": clients,
          "specific-query-idx": query_idx,
          "run-for-s": RUN_FOR_S,
          "avg-gap-s": AVG_GAP_S,
          "wait-before-start": WAIT_BEFORE_START,
          "query-file": "../query_bank.sql",
          "engine": "aurora",
        },
      )
      for clients, query_idx in product(NUM_CLIENTS, range(NUM_QUERIES))
    ],
  )
