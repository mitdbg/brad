# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import brad.proto_gen.brad_pb2 as brad__pb2


class BradStub(object):
    """BRAD's internal-use RPC interface.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSession = channel.unary_unary(
                '/brad.Brad/StartSession',
                request_serializer=brad__pb2.StartSessionRequest.SerializeToString,
                response_deserializer=brad__pb2.StartSessionResponse.FromString,
                )
        self.RunQuery = channel.unary_stream(
                '/brad.Brad/RunQuery',
                request_serializer=brad__pb2.RunQueryRequest.SerializeToString,
                response_deserializer=brad__pb2.RunQueryResponse.FromString,
                )
        self.EndSession = channel.unary_unary(
                '/brad.Brad/EndSession',
                request_serializer=brad__pb2.EndSessionRequest.SerializeToString,
                response_deserializer=brad__pb2.EndSessionResponse.FromString,
                )


class BradServicer(object):
    """BRAD's internal-use RPC interface.
    """

    def StartSession(self, request, context):
        """Start a new session.
        All requests (except this one) must include a `SessionId` that is returned
        by this method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunQuery(self, request, context):
        """Run a SQL query (or execute an internal command like BRAD_SYNC).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndSession(self, request, context):
        """End a previously started session. Clients must call this method once they
        are done with their session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BradServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSession,
                    request_deserializer=brad__pb2.StartSessionRequest.FromString,
                    response_serializer=brad__pb2.StartSessionResponse.SerializeToString,
            ),
            'RunQuery': grpc.unary_stream_rpc_method_handler(
                    servicer.RunQuery,
                    request_deserializer=brad__pb2.RunQueryRequest.FromString,
                    response_serializer=brad__pb2.RunQueryResponse.SerializeToString,
            ),
            'EndSession': grpc.unary_unary_rpc_method_handler(
                    servicer.EndSession,
                    request_deserializer=brad__pb2.EndSessionRequest.FromString,
                    response_serializer=brad__pb2.EndSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'brad.Brad', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Brad(object):
    """BRAD's internal-use RPC interface.
    """

    @staticmethod
    def StartSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/brad.Brad/StartSession',
            brad__pb2.StartSessionRequest.SerializeToString,
            brad__pb2.StartSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/brad.Brad/RunQuery',
            brad__pb2.RunQueryRequest.SerializeToString,
            brad__pb2.RunQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/brad.Brad/EndSession',
            brad__pb2.EndSessionRequest.SerializeToString,
            brad__pb2.EndSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
