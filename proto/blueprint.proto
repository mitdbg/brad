syntax = "proto3";

package brad;

// We use this file to define the serialization format of BRAD's persistent
// physical data mesh plan.

// Used to indicate the location of data.
enum Engine {
  UNKNOWN = 0;
  // The data is stored in Aurora.
  AURORA = 1;
  // The data is stored in Redshift.
  REDSHIFT = 2;
  // The data is stored on S3 in an Iceberg table and registered with Athena.
  ATHENA = 3;
}

// Stores information about how BRAD is configured.
// - Tables, their schemas, and locations
// - Dependencies between tables and transformations
// - The routing policy being used.
message Blueprint {
  string schema_name = 1;
  repeated Table tables = 2;

  Provisioning aurora = 3;
  Provisioning redshift = 4;

  RoutingPolicy policy = 5;
}

// Stores metadata about a table (its schema, where it is stored, whether it has
// a dependency on other table(s)).
message Table {
  string table_name = 1;
  repeated TableColumn columns = 2;
  repeated Engine locations = 3;
  TableDependency dependencies = 4;
  // These are secondary indexes.
  repeated Index indexes = 5;
}

// Stores type information about a column. The `type` is expected to be a
// PostgreSQL data type.
message TableColumn {
  string name = 1;
  string data_type = 2;
  bool is_primary = 3;
}

// Used to indicate a dependency on the `sources` table(s). There is an optional
// transform that can be applied (a sequence of SQL statements).
//
// If there is no transform, then it is treated as an identity transform
// (i.e., the target table is a replica of the source table). In this case,
// there can only be one source table.
message TableDependency {
  repeated string source_table_names = 2;
  string transform = 3;
}

// Stores the provisioning used for an engine.
message Provisioning {
  string instance_type = 1;
  uint32 num_nodes = 2;
}

message RoutingPolicy {
  // A serialized form of the routing policy.
  bytes policy = 1;
}

// Tracks columns that are part of an index.
message Index {
  repeated string column_name = 1;
}
