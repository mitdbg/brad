SCALE_FACTOR = 10

RUN_FOR = 30
WARMUP = 1

def custom_workload_factor(wf):
  # "workload factor" represents the number of transactional clients.
  # We have 1 analytical client per 16 transactional clients. We always have at
  # least 1 analytical client running.
  a_clients = 1 + (wf // 16)
  return {
    "tclients": wf,
    "aclients": a_clients,
  }

WORKLOAD_FACTORS = {
  "m6i_large": [1, 4, 8, 12, 16],
  "m6i_2xlarge": [1, 4, 8, 12, 16, 20, 24, 28, 32],
  "m6i_2xlarge_rep": [28, 32, 36, 40, 44, 48, 52, 56, 60, 64],
  "m6i_8xlarge": [28, 32, 36, 40, 44, 48, 52, 56, 60, 64],
  "m6i_8xlarge_rep": [60, 64, 68, 72, 76, 80, 84, 88, 92],
}

combine(
  name="postgres_only",
  deps=[
    ":pg-m6i_large",
    ":pg-m6i_2xlarge",
    ":pg-m6i_8xlarge",
  ],
)

for config, factors in WORKLOAD_FACTORS.items():
  run_experiment_group(
    name="pg-{}".format(config),
    run="./run_postgres.sh" if not config.endswith("_rep") else "./run_postgres_replica.sh",
    experiments=[
      ExperimentInstance(
        name="pg-{}-{}".format(config, wf),
        options={
          "sf": SCALE_FACTOR,
          **custom_workload_factor(wf),
          "run_for": RUN_FOR,
          "warmup": WARMUP,
        },
      )
      for wf in factors
    ],
  )


run_experiment_group(
  name="pgt-m6i_large",
  run="./run_postgres.sh",
  experiments=[
    ExperimentInstance(
      name="pgt-m6i_large-{}".format(wf),
      options={
        "sf": SCALE_FACTOR,
        "tclients": wf,
        "aclients": 0,
        "run_for": RUN_FOR,
        "warmup": WARMUP,
      },
    )
    for wf in [1, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]
  ],
)
