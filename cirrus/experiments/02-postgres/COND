from itertools import product

SCALE_FACTORS = [1]
T_CLIENTS = [1, 4, 16, 64]
A_CLIENTS = [0, 1, 2, 4]

RUN_FOR = 30
WARMUP = 1

def custom_workload_factor(wf):
  # "workload factor" represents the number of transactional clients.
  # We have 1 analytical client per 16 transactional clients.
  a_clients = wf // 16
  return {
    "tclients": wf,
    "aclients": a_clients,
  }

run_experiment_group(
  name="postgres_only",
  run="./run_postgres.sh",
  experiments=[
    ExperimentInstance(
      name="postgres_only-{}-T{}-A{}".format(scale_factor, t_clients, a_clients),
      options={
        "sf": scale_factor,
        "tclients": t_clients,
        "aclients": a_clients,
        "run_for": RUN_FOR,
        "warmup": WARMUP,
      },
    )
    for scale_factor, t_clients, a_clients in product(SCALE_FACTORS, T_CLIENTS, A_CLIENTS)
  ],
)

WORKLOAD_FACTORS = [1, 4, 8, 16, 32, 64]

run_experiment_group(
  name="postgres_wf",
  run="./run_postgres.sh",
  experiments=[
    ExperimentInstance(
      name="postgres_wf-{}-{}".format(scale_factor, wf),
      options={
        "sf": scale_factor,
        **custom_workload_factor(wf),
        "run_for": RUN_FOR,
        "warmup": WARMUP,
      },
    )
    for scale_factor, wf in product([10], WORKLOAD_FACTORS)
  ],
)
